@Documented
@Inherited
@Target(value = {ElementType.TYPE,ElementType.METHOD})
@Retention(RetentionPolicy.RUNTIME)
public @interface Auth {
    String validate() default "";
}

public class AuthInterceptor extends HandlerInterceptorAdapter {
    
    @Autowired
    private AdminMenuService service;
    
    @Autowired
    private AdminUserService userService;
    
    @Autowired
    IBaseInfoRedisDao     baseInfoRedis;
    
    @SuppressWarnings("unused")
    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
        /*if(handler.getClass().isAssignableFrom(HandlerMethod.class)){
            Auth authPassport = null;
            authPassport = ((HandlerMethod)handler).getMethod().getDeclaringClass().getAnnotation(Auth.class);
        
            //没有声明需要权限,或者声明不验证权限
            if(authPassport == null || authPassport.validate() == "")
                return true;
            else{  
                
                //获取请求URI
                String uri = request.getRequestURI();//如这样形式：/qgzh_api_manage/adminUser/zhangsan_123456/1 ,其中zhangsan就是用户编号，123456是token, 但zhangsan_123456是加密数据
                if (uri.contains("adminPrivilege")) {
                    //如果请求AdminPrivilegeController
                    return true;
                }
                //提前前台传过来uri的用户编号和token
                String[] uriSplit = uri.split("/");
                String _loginNameAndToken = uriSplit[3];
                //解密前台传过来uri的用户编号和token
                RSAPrivateKey privateKey = RSAUtils.getRSAPrivateKey(ConfigUtils.getSysConfig("rsa.private.modulus"),
                        ConfigUtils.getSysConfig("rsa.private.exponent"));
                String loginNameAndToken = RSAUtils.decryptString(privateKey, _loginNameAndToken);
                String[] loginNameAndTokenSplit = loginNameAndToken.split("_");
                String loginName = loginNameAndTokenSplit[0];//用户编号
                String token = loginNameAndTokenSplit[1];//token
                if (null != loginName) {
                    
                    //根据登录账户查询redis
                    BaseUserInfoDto redis = baseInfoRedis.selectBaseUserInfo(loginName);
                    if (redis == null || StringUtils.isEmpty(redis.getAccountCustomerNo())) {
                        response.setStatus(404);
                        return false;
                    } else {
                        List<String> permission = redis.getPermission();
                        if (null != permission && permission.size() > 0) {
                            //判断用户是否具有菜单权限
                            boolean hasPermission = false;
                            for (String item : permission) {
                                if (item.contains(authPassport.validate())) {
                                    hasPermission = true;
                                    break;
                                }
                            }
                            if (hasPermission) {
                                //具有权限
                                return true;
                            } else {
                                //没有权限
                                response.setStatus(404);
                                return false;
                            }
                        } else {
                            //没有权限
                            response.setStatus(404);
                            return false;
                        }
                    }
                    
                    
                }
                
                return true;
            }
        }
        else {
            return true;
        }*/
        return true;
    }
}

public class SessionTimeoutInterceptor implements HandlerInterceptor {

    //存储用户信息服务
    @Resource
    IBaseInfoRedisDao     baseInfoRedis;
    
    private List<String> allowUrls = new ArrayList<String>();

    public List<String> getAllowUrls() {
        return allowUrls;
    }

    public void setAllowUrls(List<String> allowUrls) {
        this.allowUrls = allowUrls;
    }

    @SuppressWarnings("unused")
    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {

        /*String requestUrl = request.getRequestURI();//如这样形式：/qgzh_api_manage/adminUser/zhangsan_123456/1 ,其中zhangsan就是用户编号，123456是token, 但zhangsan_123456是加密数据
        for (String url : allowUrls) {
            if (requestUrl.endsWith(url)) {
                return true;
            }
        }
        if (requestUrl.contains("adminPrivilege")) {
            //如果请求AdminPrivilegeController
            return true;
        }
        
        //提前前台传过来uri的用户编号和token
        String[] uriSplit = requestUrl.split("/");
        if (APIConstants.PIC_UPLOAD.equals(uriSplit[2])) {
            return true;//不拦截图片上传请求
        }
        String _loginNameAndToken = uriSplit[3];
        //解密前台传过来uri的用户编号和token
        RSAPrivateKey privateKey = RSAUtils.getRSAPrivateKey(ConfigUtils.getSysConfig("rsa.private.modulus"),
                ConfigUtils.getSysConfig("rsa.private.exponent"));
        String loginNameAndToken = RSAUtils.decryptString(privateKey, _loginNameAndToken);
        String[] loginNameAndTokenSplit = loginNameAndToken.split("_");
        String loginName = loginNameAndTokenSplit[0];//用户编号
        String token = loginNameAndTokenSplit[1];//token
        
        BaseUserInfoDto redis = baseInfoRedis.selectBaseUserInfo(loginName);
        if (redis == null || StringUtils.isEmpty(redis.getAccountCustomerNo())) {
            return false;
        }
        else {
            long pretime = Long.valueOf(redis.getToken());
            long curtime = System.currentTimeMillis();
            long configTime = Long.parseLong(ConfigUtils.getSysConfig("stime"));
            if (curtime - pretime > configTime) {
                return false;
            } else {
                redis.setToken(String.valueOf(curtime));
                baseInfoRedis.updateBaseUserInfo(loginName, redis);
                return true;
            }
        }*/
        return true;
    }

    @Override
    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,
            ModelAndView modelAndView) throws Exception {

    }

    @Override
    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)
            throws Exception {

    }

}


@Controller
@RequestMapping("login")
public class LoginController extends BaseController {
    

    @Resource
    private FaqInfoAdminService service;
    
    @Resource
    private AdminUserService adminservice;
    
    @Resource
    private AdminMenuService menuService;
    
    @Resource
    private AdminRoleService roleService;

    //存储用户信息服务
    @Resource
    IBaseInfoRedisDao     baseInfoRedis;
    /**
     * 用户默认登陆
     * @return
     */
    @RequestMapping(method = RequestMethod.POST)
    @ResponseBody
    public JsonResp<LoginDto> login(@RequestBody UserInfo userInfo, HttpServletRequest request) {
        JsonResp<LoginDto> ret = new JsonResp<LoginDto>();
        LoginDto dto = new LoginDto();
        try {
            String username = userInfo.getUserId();
            String password = userInfo.getPassword();
            //获得私钥
            RSAPrivateKey privateKey = RSAUtils.getRSAPrivateKey(ConfigUtils.getSysConfig("rsa.private.modulus"),
                    ConfigUtils.getSysConfig("rsa.private.exponent"));
            //解码 获得用户密码
            String accountPassword = RSAUtils.decryptString(privateKey, password);
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("loginName", username);
            map.put("loginPassword", accountPassword);
            
            int ishave=adminservice.getCountByLoginNameAndLoginPassword(map);
            long stime = System.currentTimeMillis();
            if (ishave<1) {
                ret.setResult(Constants.RESULT_ERROR);
                ret.setMsg(MessageUtils.getText("erro_0010"));
            } else {
                //根据登录账户查询用户
                AdminUser user = adminservice.getByLoginName(username);
                List<String> permission = null;//权限
                if (null != user && null != user.getUserId()) {
                    dto.setBranchId(user.getBranchId());//营业部ID
                    
                    //当前登录账户是否研究所审核人员
                    List<AdminRole> roles = roleService.getAdminRoleListByUserId(user.getUserId());
                    String instituteauditor = "0";//研究所审核人员"1",非研究所审核人员"0"
                    boolean isInstituteauditor = false;
                    if (null != roles && roles.size() > 0) {
                        for (AdminRole role : roles) {
                            if(null != role) {
                                if (APIConstants.INSTITUTEAUDITOR.equals(role.getRoleName())) {
                                    isInstituteauditor = true;
                                    break;
                                }
                            }
                        }
                        //获取角色名称集合
                        List<String> roleNames = new ArrayList<String>();
                        for (AdminRole role : roles) {
                            if (null != role) {
                                roleNames.add(role.getRoleName());
                            }
                        }
                        dto.setRoleNames(roleNames);
                    }
                    if (isInstituteauditor) {
                        instituteauditor = "1";
                    }
                    dto.setSuperAdmin(instituteauditor);
                    
                    //根据用户编号查询二级菜单
                    List<AdminMenu> list = menuService.getAdminMenuListByUserId(user.getUserId());
                    if (null != list && list.size() > 0) {
                        permission = new ArrayList<String>();
                        for (AdminMenu menu : list) {
                            if (null != menu.getMenus() && menu.getMenus().size() > 0) {
                                for (AdminMenu item : menu.getMenus()) {
                                    if (null != item.getMenuPrivilege()) {
                                        permission.add(item.getMenuPrivilege());
                                    }
                                }
                            }
                        }
                    }
                }
                //Redis先用户信息删除记录
                BaseUserInfoDto redis = baseInfoRedis.selectBaseUserInfo(username);
                if (null != redis && StringUtils.isNotEmpty(redis.getAccountCustomerNo())) {
                    baseInfoRedis.deleteBaseUserInfo(username);
                }
                //用户信息存入Redis
                BaseUserInfoDto baseUserInfoDto = new BaseUserInfoDto();
                baseUserInfoDto.setAccountCustomerNo(username);
                baseUserInfoDto.setToken(String.valueOf(stime));
                baseUserInfoDto.setOpenId(username);
                baseUserInfoDto.setPermission(permission);
                baseInfoRedis.insertBaseUserInfo(username, baseUserInfoDto);
                String message = username + "_" + String.valueOf(stime);//拼接字符串返回给前台，格式为：登录账户_token
                dto.setToken(message);
                ret.setResult(Constants.RESULT_SUCCESS);
                ret.setInfo(dto);
            }
        }
        catch (Exception ex) {
            log.error(ex);
            ret.setResult(Constants.RESULT_ERROR);
            ret.setMsg(MessageUtils.getText("erro_0001"));
        }
        return ret;
    }
}

/**
 * 理财产品Controller
 * @author zhang chengfu
 *
 */
@Auth(validate = "financialProductInfo")
@Controller
@RequestMapping(value = "financialProductInfo/{token}")
public class FinancialProductInfoController extends BaseController {
    
    @Autowired
    private FinancialProductInfoService service;
    
    @Autowired
    private AdminUserService userService;
    
    /**
     * 获取理财产品分页数据
     * @param pageNo 页数
     * @param productName  产品名称
     * @param productStatus 审核状态
     * @return
     */
    @RequestMapping(value = "search", method = RequestMethod.GET)
    @ResponseBody
    public JsonResp<PagingResult<FinancialProductInfoWithBLOBs>> getAll(@RequestParam int pageNo, @RequestParam String productName, @RequestParam String productStatus) {
        JsonResp<PagingResult<FinancialProductInfoWithBLOBs>> ret = new JsonResp<PagingResult<FinancialProductInfoWithBLOBs>>();
        try {
            // 分页
            Pagination pagination = new Pagination(pageNo);
            // 参数
            Map<Object, Object> param = new HashMap<Object, Object>();
            param.put("productName", new String(productName.getBytes("ISO-8859-1"), "UTF-8"));
            if (StringUtils.isEmpty(productStatus)) {
                param.put("productStatus", null);
            } else {
                param.put("productStatus", Integer.valueOf(new String(productStatus.getBytes("ISO-8859-1"), "UTF-8")));
            }
            pagination.setParams(param);
            PagingResult<FinancialProductInfoWithBLOBs> list = service.getAll(pagination);
            // 将检索内容返回数据
            Map<String, Object> paramReturn = new HashMap<String, Object>();
            paramReturn.put("productName", new String(productName.getBytes("ISO-8859-1"), "UTF-8"));
            paramReturn.put("productStatus", productStatus);
            list.setParams(paramReturn);
            ret.setInfo(list);
            return ret;
        }
        catch (Exception ex) {
            log.error("message", ex);
            ret.setResult(Constants.RESULT_ERROR);
            ret.setMsg(MessageUtils.getText("erro_0001"));
        }
        return ret;
    }
    
    /**
     * 根据编号删除FinancialProductInfoWithBLOBs记录
     * 
     * @param id 编号
     * @return
     */
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @ResponseBody
    public JsonResp<Void> deleteFinancialProductInfoWithBLOBs(@PathVariable int id) {
        JsonResp<Void> ret = new JsonResp<Void>();
        try {
            service.deleteById(id);
        }
        catch (DBConcurrencyException ex) {
            log.error("message", ex);
            ret.setResult(0);
            ret.setMsg(MessageUtils.getText("erro_0005"));
        }
        catch (Exception ex) {
            log.error("message", ex);
            ret.setResult(Constants.RESULT_ERROR);
            ret.setMsg(MessageUtils.getText("erro_0004"));
        }
        return ret;
    }
    
    /**
     * 根据编号查询FinancialProductInfoWithBLOBs记录
     * 
     * @param id 编号
     * @return
     */
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @ResponseBody
    public JsonResp<FinancialProductInfoWithBLOBs> getFinancialProductInfoWithBLOBs(@PathVariable int id, HttpServletRequest request) {
        JsonResp<FinancialProductInfoWithBLOBs> ret = new JsonResp<FinancialProductInfoWithBLOBs>();
        try {
            FinancialProductInfoWithBLOBs info = service.getFinancialProductInfoWithBLOBsById(id);
            /*//产品说明
            String productContent = info.getProductContent();
            String requestUrl = request.getRequestURI();
            //提前前台传过来token
            String[] uriSplit = requestUrl.split("/");
            String _loginNameAndToken = uriSplit[3];
            //拼接富文本图片请求地址
            String path = ConfigUtils.getSysConfig("rich_text_financial_product_info", _loginNameAndToken);
            path += ConfigUtils.getSysConfig("FILE_RICH_TEXT_UPLOAD_PATH");
            info.setProductContent(StringUtils.strConvert(productContent, path));*/
            ret.setInfo(info);
        }
        catch (Exception ex) {
            log.error("message", ex);
            ret.setResult(Constants.RESULT_ERROR);
            ret.setMsg(MessageUtils.getText("erro_0001"));
        }
        return ret;
    }
    
    /**
     * 保存FinancialProductInfoWithBLOBs记录
     * @param entity FinancialProductInfoWithBLOBs记录
     * @param request HttpServletRequest请求
     * @return
     */
    @RequestMapping(method = RequestMethod.POST)
    @ResponseBody
    public JsonResp<Void> addFinancialProductInfoWithBLOBs(@RequestBody FinancialProductInfoWithBLOBs entity, HttpServletRequest request) {
        JsonResp<Void> ret = new JsonResp<Void>();
        try {
            String requestUrl = request.getRequestURI();
            //提前前台传过来uri的用户编号和token
            String[] uriSplit = requestUrl.split("/");
            String _loginNameAndToken = uriSplit[3];
            //解密前台传过来uri的用户编号和token
            RSAPrivateKey privateKey = RSAUtils.getRSAPrivateKey(ConfigUtils.getSysConfig("rsa.private.modulus"),
                    ConfigUtils.getSysConfig("rsa.private.exponent"));
            String loginNameAndToken = RSAUtils.decryptString(privateKey, _loginNameAndToken);
            String[] loginNameAndTokenSplit = loginNameAndToken.split("_");
            String loginName = loginNameAndTokenSplit[0];//用户帐号
            AdminUser user = userService.getByLoginName(loginName);
            if (null != user) {
                entity.setCreateUser(user.getUserId());
            }
            service.addNewFinancialProductInfoWithBLOBs(entity);
        }
        catch (Exception ex) {
            log.error("message", ex);
            ret.setResult(Constants.RESULT_ERROR);
            ret.setMsg(MessageUtils.getText("erro_0004"));
            if (ex.getMessage().contains("Data too long for column 'product_content'")) {
                ret.setMsg(APIConstants.PRODUCT_CONTENT_TOO_LONG);
            }
        }
        return ret;
    }
    
    /**
     * 更新FinancialProductInfoWithBLOBs记录
     * @param entity FinancialProductInfoWithBLOBs记录
     * @param request HttpServletRequest请求
     * @return
     */
    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @ResponseBody
    public JsonResp<Void> updateFinancialProductInfoWithBLOBs(@RequestBody FinancialProductInfoWithBLOBs entity, HttpServletRequest request) {
        JsonResp<Void> ret = new JsonResp<Void>();
        try {
            String requestUrl = request.getRequestURI();
            //提前前台传过来uri的用户编号和token
            String[] uriSplit = requestUrl.split("/");
            String _loginNameAndToken = uriSplit[3];
            //解密前台传过来uri的用户编号和token
            RSAPrivateKey privateKey = RSAUtils.getRSAPrivateKey(ConfigUtils.getSysConfig("rsa.private.modulus"),
                    ConfigUtils.getSysConfig("rsa.private.exponent"));
            String loginNameAndToken = RSAUtils.decryptString(privateKey, _loginNameAndToken);
            String[] loginNameAndTokenSplit = loginNameAndToken.split("_");
            String loginName = loginNameAndTokenSplit[0];//用户帐号
            AdminUser user = userService.getByLoginName(loginName);
            if (null != user) {
                entity.setUpdateUser(user.getUserId());
            }
            service.updateFinancialProductInfoWithBLOBs(entity);
        }
        catch (Exception ex) {
            log.error("message", ex);
            ret.setResult(Constants.RESULT_ERROR);
            ret.setMsg(MessageUtils.getText("erro_0004"));
            if (ex.getMessage().contains("Data too long for column 'product_content'")) {
                ret.setMsg(APIConstants.PRODUCT_CONTENT_TOO_LONG);
            }
        }
        return ret;
    }
    
    /**
     * 上传图片
     * @param uploadFile 图片
     * @return
     */
    @RequestMapping(value = "uploadFile", method = RequestMethod.POST)
    @ResponseBody
    public JsonResp<String> uploadFile(HttpServletRequest request, HttpServletResponse response) {
        JsonResp<String> ret = new JsonResp<String>();
        try {
            //创建一个通用的多部分解析器
            CommonsMultipartResolver multipartResolver = new CommonsMultipartResolver(request.getSession().getServletContext());
            //判断 request 是否有文件上传,即多部分请求
            String uploadPath = "";//文件上传地址
            if (multipartResolver.isMultipart(request)) {
              //转换成多部分request
                MultipartHttpServletRequest multiRequest = (MultipartHttpServletRequest)request;
                //取得request中的所有文件名
                Iterator<String> iter = multiRequest.getFileNames();
                while(iter.hasNext()) {
                    MultipartFile file = multiRequest.getFile(iter.next());//获取传到后台的文件
                    if (null != file) {
                        Long size = file.getSize();
                        //文件太大不能上传
                        if (size > Long.valueOf(ConfigUtils.getSysConfig("FILE_MAX_SIZE"))) {
                            String msg = MessageUtils.getText("erro_0007");
                            ret.setMsg(msg);
                            ret.setResult(0);
                            return ret;
                        }
                        //获取文件后缀名
                        String fileName = file.getOriginalFilename();
                        String[] str = fileName.split("\\.");
                        String suffixName = "." + str[str.length - 1];
                        //重新命名文件名
                        String uploadName = DateUtils.dateToString(new Date(), DateUtils.PATTEN_FILE_RENAME);
                        // 根目录
                        String basePath = ConfigUtils.getSysConfig("FILE_UPLOAD_PATH");
                        // 设置文件上传路径
                        String filePath = basePath
                                        + ConfigUtils.getSysConfig("FILE_FINANCIAL_PRODUCT_INFO");
                        // 文件夹不存在创建文件夹
                        File fileFolderFile = new File(filePath);
                        if (!fileFolderFile.exists()) {
                            fileFolderFile.mkdirs();
                        }
                        File targetFile = new File(filePath, uploadName + suffixName); 
                        String urlpath=ConfigUtils.getSysConfig("FILE_SYSTEM_PATH")+ConfigUtils.getSysConfig("FILE_FINANCIAL_PRODUCT_INFO");
                        uploadPath = urlpath + APIConstants.RIGHT_SLASH + uploadName + suffixName;
                        //上传文件
                        file.transferTo(targetFile);
                    }
                }
                ret.setInfo(uploadPath);
            } else {
                ret.setResult(Constants.RESULT_ERROR);
                ret.setMsg(MessageUtils.getText("info_0008"));
                return ret;
            }
        }
        catch (Exception ex) {
            log.error("message", ex);
            ret.setResult(Constants.RESULT_ERROR);
            ret.setMsg(MessageUtils.getText("erro_0004"));
        }
        return ret;
    }
    
    /**
     * 根据id对应的记录输出字节流
     * @param id 主键
     * @return 字节流
     */
    @RequestMapping(value = "getStream", method = RequestMethod.GET)
    @ResponseBody
    public byte[] downloadFile(@RequestParam int id) {
        byte[] data = null;
        try {
            //根据id获取FinancialProductInfoWithBLOBs记录
            FinancialProductInfoWithBLOBs entity = service.getFinancialProductInfoWithBLOBsById(id);
            //上传文件路径
            String uploadPath = "";
            if (null != entity) {
                uploadPath = entity.getImgpath();
                File file = new File(uploadPath);
                if (file.exists()) {
                    FileInputStream fis = new FileInputStream(file);
                    data = FileCopyUtils.copyToByteArray(fis);
                }
            }
        }
        catch (Exception ex) {
            log.error("message", ex);
            return null;
        }
        return data;
    }
    
    /**
     * 根据图片名称输出字节流
     * @param getimagenameStream 图片名称
     * @return 字节流
     */
    @RequestMapping(value = "getimagenameStream", method = RequestMethod.GET)
    @ResponseBody
    public byte[] getimagefile(@RequestParam String getimagenameStream ) {
        byte[] data = null;
        try {
              String basePath = ConfigUtils.getSysConfig("FILE_UPLOAD_PATH");
              // 设置文件上传路径
              String filePath = basePath
                              + ConfigUtils.getSysConfig("FILE_FINANCIAL_PRODUCT_INFO");
                File file = new File(filePath, getimagenameStream);
                if (file.exists()) {
                    FileInputStream fis = new FileInputStream(file);
                    data = FileCopyUtils.copyToByteArray(fis);
                }
        }
        catch (Exception ex) {
            log.error("message", ex);
            return null;
        }
        return data;
    }
    
    /**
     * 富文本图片输出字节流
     * @param getimagenameStream 图片路径名称
     * @return 字节流
     */
    @RequestMapping(value = "getimage", method = RequestMethod.GET)
    @ResponseBody
    public byte[] getRichTextImageFile(@RequestParam String getimagenameStream ) {
        byte[] data = null;
        try {
            File file = new File(getimagenameStream);
            if (file.exists()) {
                FileInputStream fis = new FileInputStream(file);
                data = FileCopyUtils.copyToByteArray(fis);
            }
        }
        catch (Exception ex) {
            log.error("message", ex);
            return null;
        }
        return data;
    }
    
}
